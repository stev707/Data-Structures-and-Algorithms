// given an integer array "nums" sorted in non-decreasing order
// return an array of the squares of each number sorted in non-decreasing order

// Input: nums = [-4,-1,0,3,10]
// Output: [0,1,9,16,100]

// Time: O(N) because modify the input array "in-place"
// Space: O(N) because we created a new output array of the same size as the input array

class Solution {
  public int[] sortedSquares(int[] nums) {
    int n = nums.length;        // declare variable n with the array length
    int result[] = new int[n];  // create an empty array with the n size
    int left = 0;               // pointer 1
    int right = n - 1;          // pointer 2
    
    for (int i = n - 1; i >= 0; i--) {    // move from right to left
      int square;                // initialize square
      if (Math.abs(nums[left]) < Math.abs(nums[right])    // if absoluate value of nums[right] is greater than abs value of nums[left]
        square = nums[right--];    // nums[right] becomes the value for square. Then move the right pointer to the left
      else
        int square = nums[left++];  // else, nums[left] becomes the value for the square. Then move the left pointer to the right
    }
    result[i] = square * square;
  }
  return result;  // return the array of the squares in non-decreasing order
}
